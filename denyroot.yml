- hosts: all
  gather_facts: false
  remote_user: root
  # brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb
  vars:
    ssh_user: "root"
    normal_ssh_user: "centos"
    ansible_ssh_user: "{{ ssh_user }}"
    ansible_ssh_pass: "{{ initial_ssh_pass }}"
  tasks:

    - name: test root access with pw
      local_action: shell sshpass -p '{{ initial_ssh_pass }}' ssh {{ ssh_user }}@{{ server_name }} "echo success"
      ignore_errors: true
      register: initialuser

    - name: ensure user group exists
      group: name={{normal_ssh_user}} state=present
      when: initialuser|success

    - name: ensure normal_ssh_user created
      user: name={{normal_ssh_user}} groups={{normal_ssh_user}},wheel
      when: initialuser|success

    - name: set ssh key for normal user
      authorized_key: user={{normal_ssh_user}} key="{{ lookup('file', normal_ssh_key ) }}"
      when: initialuser|success

    - name: create sudoers file for user
      shell: "touch /etc/sudoers.d/{{normal_ssh_user}}"
      args:
        chdir: /etc/sudoers.d
        creates: "{{normal_ssh_user}}"
      when: initialuser|success

    - name: add normal user password less sudo to their sudoers file
      lineinfile: >
        dest="/etc/sudoers.d/{{normal_ssh_user}}"
        state=present
        regexp='^#?{{ item.key }}'
        line='{{ item.key }} {{ item.value }}'
        validate='visudo -cf %s'
      with_items:
        - { key: "{{normal_ssh_user}}", value: 'ALL=(ALL) NOPASSWD: ALL' }
      when: initialuser|success

    - name: Strict SSH access
      lineinfile: >
        dest=/etc/ssh/sshd_config
        state=present
        regexp='^#?{{ item.key }}'
        line='{{ item.key }} {{ item.value }}'
        validate='/usr/sbin/sshd -t -f %s'
      with_items:
        - { key: 'PermitRootLogin',        value: 'no'}
        - { key: 'PasswordAuthentication', value: 'no'}
        - { key: 'LoginGraceTime',         value: "60"}
        - { key: 'MaxSessions',            value: "5"}
        - { key: 'MaxStartups',            value: "10:30:60"}
      sudo: yes
      when: initialuser|success
      notify: restart sshd

  handlers:
    - name: restart sshd
      service: name=sshd state=restarted
      sudo: yes
